eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIHRhZ3M6IHRydWUKICAgIHJlY3Vyc2l2ZTogdHJ1ZQogICAgc3VibW9kdWxlX292ZXJyaWRlOgogICAgICB3aWtpOiBodHRwczovL2dpdGh1Yi5jb20vc2NhbGFjZW50ZXIvc2J0LXJlbGVhc2UtZWFybHkud2lraS5naXQKCiAgc2Z0cF9jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGUKICAgIHJlc3RvcmU6IHRydWUKICAgIGlnbm9yZV9icmFuY2g6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2gsIHB1bGxfcmVxdWVzdCwgZGVwbG95bWVudCBdCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAoKICBidWlsZDoKICAgIGltYWdlOiBzY2FsYWNlbnRlci9zY2FsYToxLjMKICAgIHZvbHVtZXM6CiAgICAgIC0gL2Zha2Utc2NhbGFjZW50ZXI6L2tleXMKICAgIGVudmlyb25tZW50OgogICAgICAtIERST05FX0RJUj0vZHJvbmUKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBsb2cgfCBoZWFkIC1uIDIwCiAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc2V0dXBfa2V5cy5zaCAKICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9zdG9yZV9jcmVkZW50aWFscy5zaCAKICAgICAgLSBzYnQgY2xlYW4gc2NyaXB0ZWQKCiAgcHVibGlzaDoKICAgICMgTW91bnQgZnJvbSBhbiBpZGVudGljYWwgaW1hZ2UgYnV0IHdpdGggZGlmZmVyZW50IGlkCiAgICAjIHNvIHRoYXQgc29uYXR5cGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBub3QgYWNjZXNzaWJsZQogICAgaW1hZ2U6IHNjYWxhY2VudGVyL3NjYWxhLXB1Ymxpc2g6MS4zCiAgICB2b2x1bWVzOgogICAgICAtIC9zY2FsYWNlbnRlcjova2V5cwogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBkZXBsb3ltZW50IF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBEUk9ORV9ESVI9L2Ryb25lCiAgICBjb21tYW5kczoKICAgICAgLSBnaXQgbG9nIHwgaGVhZCAtbiAyMAogICAgICAtIC91c3IvbG9jYWwvYmluL3NldHVwX2tleXMuc2ggCiAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc3RvcmVfY3JlZGVudGlhbHMuc2ggCiAgICAgIC0gc2J0IHJlbGVhc2VFYXJseQoKICBzZnRwX2NhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgc3RhdHVzOiBbIHN1Y2Nlc3MsIGZhaWx1cmUgXQogICAgICBldmVudDogWyBwdXNoLCBwdWxsX3JlcXVlc3QsIGRlcGxveW1lbnQgXQogICAgbW91bnQ6CiAgICAgIC0gL2Ryb25lLy5pdnkyCiAgICAgIC0gL2Ryb25lLy5jb3Vyc2llcgogICAgICAtIC9kcm9uZS8uc2J0CiAgICAgIC0gL2Ryb25lLy5naXQK.BwS6YhYBZ-hoGi76FbMmk8I_HObyWA2Om4fAcqhA0as