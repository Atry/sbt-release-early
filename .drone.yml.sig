eyJhbGciOiJIUzI1NiJ9.Y2xvbmU6CiAgcmVjdXJzaXZlOiB0cnVlCiAgc3VibW9kdWxlX292ZXJyaWRlOgogICAgd2lraTogaHR0cHM6Ly9naXRodWIuY29tL3NjYWxhY2VudGVyL3NidC1yZWxlYXNlLWVhcmx5Lndpa2kuZ2l0CgpwaXBlbGluZToKICBzZnRwX2NhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcmVzdG9yZTogdHJ1ZQogICAgaWdub3JlX2JyYW5jaDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWcsIGRlcGxveW1lbnQgXQogICAgbW91bnQ6CiAgICAgIC0gL2Ryb25lLy5pdnkyCiAgICAgIC0gL2Ryb25lLy5jb3Vyc2llcgogICAgICAtIC9kcm9uZS8uc2J0CiAgICAgIC0gL2Ryb25lLy5naXQKCiAgYnVpbGQ6CiAgICBpbWFnZTogc2NhbGFjZW50ZXIvc2NhbGE6MS4zCiAgICB2b2x1bWVzOgogICAgICAtIC9mYWtlLXNjYWxhY2VudGVyOi9rZXlzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBEUk9ORV9ESVI9L2Ryb25lCiAgICBjb21tYW5kczoKICAgICAgLSBnaXQgZmV0Y2ggLS10YWdzICYmIGdpdCBsb2cgfCBoZWFkIC1uIDIwCiAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc2V0dXBfa2V5cy5zaCAKICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9zdG9yZV9jcmVkZW50aWFscy5zaCAKICAgICAgLSBzYnQgY2xlYW4gZGVidWcgc2NyaXB0ZWQKCiAgcHVibGlzaDoKICAgICMgTW91bnQgZnJvbSBhbiBpZGVudGljYWwgaW1hZ2UgYnV0IHdpdGggZGlmZmVyZW50IGlkCiAgICAjIHNvIHRoYXQgc29uYXR5cGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBub3QgYWNjZXNzaWJsZQogICAgaW1hZ2U6IHNjYWxhY2VudGVyL3NjYWxhLXB1Ymxpc2g6MS4zCiAgICB2b2x1bWVzOgogICAgICAtIC9zY2FsYWNlbnRlcjova2V5cwogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBkZXBsb3ltZW50IF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBEUk9ORV9ESVI9L2Ryb25lCiAgICBjb21tYW5kczoKICAgICAgLSBnaXQgZmV0Y2ggLS10YWdzICYmIGdpdCBsb2cgfCBoZWFkIC1uIDIwCiAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc2V0dXBfa2V5cy5zaCAKICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9zdG9yZV9jcmVkZW50aWFscy5zaCAKICAgICAgLSBzYnQgcmVsZWFzZUVhcmx5CgogIHNmdHBfY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZWJ1aWxkOiB0cnVlCiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgc3VjY2VzcywgZmFpbHVyZSBdCiAgICAgIGV2ZW50OiBbIHB1c2gsIHB1bGxfcmVxdWVzdCwgdGFnLCBkZXBsb3ltZW50IF0KICAgIG1vdW50OgogICAgICAtIC9kcm9uZS8uaXZ5MgogICAgICAtIC9kcm9uZS8uY291cnNpZXIKICAgICAgLSAvZHJvbmUvLnNidAogICAgICAtIC9kcm9uZS8uZ2l0Cg.yX1m_Lf5DkZL2BaSKbyVlsKIlS7ejUNKP3bY9hNHgPc