eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICB0YWdzOiB0cnVlCiAgICByZWN1cnNpdmU6IHRydWUKICAgIHN1Ym1vZHVsZV9vdmVycmlkZToKICAgICAgd2lraTogaHR0cHM6Ly9naXRodWIuY29tL3NjYWxhY2VudGVyL3NidC1yZWxlYXNlLWVhcmx5Lndpa2kuZ2l0CgogIHNmdHBfY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBpZ25vcmVfYnJhbmNoOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudCBdCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAoKICBidWlsZDoKICAgIGltYWdlOiBzY2FsYWNlbnRlci9zY2FsYToxLjMKICAgIHZvbHVtZXM6CiAgICAgIC0gL2Zha2Utc2NhbGFjZW50ZXI6L2tleXMKICAgIGVudmlyb25tZW50OgogICAgICAtIERST05FX0RJUj0vZHJvbmUKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBsb2cgfCBoZWFkIC1uIDIwCiAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc2V0dXBfa2V5cy5zaCAKICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9zdG9yZV9jcmVkZW50aWFscy5zaCAKICAgICAgLSBzYnQgY2xlYW4gZGVidWcgc2NyaXB0ZWQKCiAgcHVibGlzaDoKICAgICMgTW91bnQgZnJvbSBhbiBpZGVudGljYWwgaW1hZ2UgYnV0IHdpdGggZGlmZmVyZW50IGlkCiAgICAjIHNvIHRoYXQgc29uYXR5cGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBub3QgYWNjZXNzaWJsZQogICAgaW1hZ2U6IHNjYWxhY2VudGVyL3NjYWxhLXB1Ymxpc2g6MS4zCiAgICB2b2x1bWVzOgogICAgICAtIC9zY2FsYWNlbnRlcjova2V5cwogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBkZXBsb3ltZW50IF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBEUk9ORV9ESVI9L2Ryb25lCiAgICBjb21tYW5kczoKICAgICAgLSBnaXQgbG9nIHwgaGVhZCAtbiAyMAogICAgICAtIC91c3IvbG9jYWwvYmluL3NldHVwX2tleXMuc2ggCiAgICAgIC0gL3Vzci9sb2NhbC9iaW4vc3RvcmVfY3JlZGVudGlhbHMuc2ggCiAgICAgIC0gc2J0IHJlbGVhc2VFYXJseQoKICBzZnRwX2NhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgc3RhdHVzOiBbIHN1Y2Nlc3MsIGZhaWx1cmUgXQogICAgICBldmVudDogWyBwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudCBdCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAo.iJqGIagzxw_j8LKSJFtQ72pIjtqPnIsJU2jYRAXlsSo